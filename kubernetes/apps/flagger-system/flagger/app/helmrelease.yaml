---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: flagger
  namespace: flagger-system
spec:
  interval: 1h
  releaseName: flagger
  maxHistory: 2
  install: # override existing Flagger CRDs
    remediation:
      retries: 3
    crds: CreateReplace
  upgrade: # update Flagger CRDs
    crds: CreateReplace
    cleanupOnFail: true
    remediation:
      retries: 3
  uninstall:
    keepHistory: false
  chart:
    spec:
      chart: flagger
      version: 1.34.0 # update Flagger to the latest minor version
      interval: 30m # scan for new versions every six hours
      sourceRef:
        kind: HelmRepository
        name: flagger
        namespace: flux-system
      verify: # verify the chart signature with Cosign keyless
        provider: cosign
  values:
    podAnnotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "8080"
      appmesh.k8s.aws/sidecarInjectorWebhook: disabled
      linkerd.io/inject: enabled
    metricsServer: "http://10.42.1.75:9090"
    nodeSelector:
      kubernetes.io/os: linux
    prometheus:
      install: false
      image: docker.io/prom/prometheus:v2.41.0
      pullSecret:
      retention: 2h
      # when enabled, it will add a security context for the prometheus pod
      securityContext:
        enabled: false
        context:
          readOnlyRootFilesystem: true
          runAsUser: 10001
    serviceMonitor:
      enabled: true
      namespace: monitoring
      labels:
        release: prometheus
    clusterName: home-kubernetes
    podMonitor:
      enabled: true
    leaderElection:
      enabled: true
      replicaCount: 4
      leaseDuration: 15s
      renewDeadline: 10s
      retryPeriod: 2s
    serviceAccount:
      # serviceAccount.create: Whether to create a service account or not
      create: true
      # serviceAccount.name: The name of the service account to create or use
      name: ""
      # serviceAccount.annotations: Annotations for service account
      annotations: { }
    rbac:
      # rbac.create: `true` if rbac resources should be created
      create: true
      # rbac.pspEnabled: `true` if PodSecurityPolicy resources should be created
      pspEnabled: false
    crd:
      # crd.create: `true` if custom resource definitions should be created
      create: true

