---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: jenkins # Name of the HelmRelease resource
  namespace: ci-cd-system
spec:
  interval: 1m
  chart:
    spec:
      chart: jenkins
      version: 4.8.2
      sourceRef:
        kind: HelmRepository
        name: jenkins
        namespace: flux-system
  maxHistory: 2
  install:
    crds: CreateReplace
    remediation:
      retries: 3
  upgrade:
    crds: CreateReplace
    cleanupOnFail: true
    remediation:
      retries: 3
  uninstall:
    keepHistory: false
  dependsOn:
    - name: local-path-provisioner
      namespace: kube-system
  values:
    controller:
      # Used for label app.kubernetes.io/component
      componentName: "jenkins-controller"
      image: "jenkins/jenkins"
      servicePort: 8080
      targetPort: 808

      adminSecret: false
      adminUser: 'Sinless777'

      admin:
        existingSecret:
          name: jenkins-admin-secret

      # This values should not be changed unless you use your custom image of jenkins or any devired from. If you want to use
      # Cloudbees Jenkins Distribution docker, you should set jenkinsHome: "/var/cloudbees-jenkins-distribution"
      jenkinsHome: "/var/jenkins_home"

      # List of plugins to be install during Jenkins controller start
      installPlugins:
        - kubernetes:4054.v2da_8e2794884
        - workflow-aggregator:596.v8c21c963d92d
        - git:5.2.0
        - configuration-as-code:1714.v09593e830cfa
        - discord-notifier:241.v448b_ccd0c0d6
        - docker-plugin:1.5
        - docker-pipeline:572.v950f58993843

      resources:
        requests:
          cpu: "50m"
          memory: "256Mi"
        limits:
          cpu: "2000m"
          memory: "4096Mi"

      # Name of default cloud configuration.
      cloudName: "home-kubernetes"

      ingress:
        enabled: true
        ingressClassName: internal
        annotations:
          hajimari.io/icon: simple-icons:grafana
        hosts:
          - &host "jenkins.${SECRET_DOMAIN}"
        tls:
          - hosts:
              - *host "jenkins.${SECRET_DOMAIN}"

    agent:
      enabled: true
      resources:
        requests:
          cpu: "512m"
          memory: "512Mi"
          # ephemeralStorage:
        limits:
          cpu: "512m"
          memory: "512Mi"
          # ephemeralStorage:


    persistence:
      enabled: true
      storageClass: local-path
      accessMode: "ReadWriteOnce"
      size: "10Gi"


    # Expose Prometheus metrics
    prometheus:
      # If enabled, add the prometheus plugin to the list of plugins to install
      # https://plugins.jenkins.io/prometheus
      enabled: true
      # Additional labels to add to the ServiceMonitor object
      serviceMonitorAdditionalLabels: { }
      # Set a custom namespace where to deploy ServiceMonitor resource
      # serviceMonitorNamespace: monitoring
      scrapeInterval: 60s
      # This is the default endpoint used by the prometheus plugin
      scrapeEndpoint: /prometheus
      # Additional labels to add to the PrometheusRule object
      alertingRulesAdditionalLabels: { }
      # An array of prometheus alerting rules
      # See here: https://prometheus.io/docs/prometheus/latest/configuration/alerting_rules/
      # The `groups` root object is added by default, simply add the rule entries
      alertingrules: [ ]
      # Set a custom namespace where to deploy PrometheusRule resource
      prometheusRuleNamespace: ""

      # RelabelConfigs to apply to samples before scraping. Prometheus Operator automatically adds
      # relabelings for a few standard Kubernetes fields. The original scrape jobâ€™s name
      # is available via the __tmp_prometheus_job_name label.
      # More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config
      relabelings: [ ]
      # MetricRelabelConfigs to apply to samples before ingestion.
      metricRelabelings: [ ]

    ## Install Default RBAC roles and bindings
    rbac:
      create: true
      readSecrets: false

