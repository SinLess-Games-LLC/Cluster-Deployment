---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: jenkins
  namespace: ci-cd-system
spec:
  interval: 1m
  chart:
    spec:
      chart: jenkins
      version: 4.8.2
      sourceRef:
        kind: HelmRepository
        name: jenkins
        namespace: flux-system
  maxHistory: 2
  install:
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  uninstall:
    keepHistory: false
  dependsOn:
    - name: local-path-provisioner
      namespace: kube-system
  values:
    controller:
      # Used for label app.kubernetes.io/component
      componentName: "jenkins-controller"
      image: "jenkins/jenkins"
      servicePort: 8080
      targetPort: 8080


      adminUser: "admin"
      # adminPassword: <defaults to random>
      admin:
        existingSecret: ""
        userKey: jenkins-admin-user
        passwordKey: jenkins-admin-password
      # This values should not be changed unless you use your custom image of jenkins or any devired from. If you want to use
      # Cloudbees Jenkins Distribution docker, you should set jenkinsHome: "/var/cloudbees-jenkins-distribution"
      jenkinsHome: "/var/jenkins_home"

      resources:
        requests:
          cpu: "50m"
          memory: "256Mi"
        limits:
          cpu: "2000m"
          memory: "4096Mi"


      # List of plugins to be install during Jenkins controller start
      installPlugins:
        - kubernetes:4029.v5712230ccb_f8
        - workflow-aggregator:596.v8c21c963d92d
        - git:5.1.0
        - configuration-as-code:1670.v564dc8b_982d0

      # Set to false to download the minimum required version of all dependencies.
      installLatestPlugins: true

      # Set to true to download latest dependencies of any plugin that is requested to have the latest version.
      installLatestSpecifiedPlugins: false

      # List of plugins to install in addition to those listed in controller.installPlugins
      additionalPlugins: [ ]


      # Generate SecretClaim resources in order to create Kubernetes secrets from HashiCorp Vault using kube-vault-controller.
      # 'name' is name of the secret that will be created in Kubernetes. The Jenkins fullname is prepended to this value.
      # 'path' is the fully qualified path to the secret in Vault
      # 'type' is an optional Kubernetes secret type. Defaults to 'Opaque'
      # 'renew' is an optional secret renewal time in seconds
      secretClaims: [ ]
      # - name: secretName        # required
      #   path: testPath          # required
      #   type: kubernetes.io/tls # optional
      #   renew: 60               # optional

      # Name of default cloud configuration.
      cloudName: "home-kubernetes"

      # Below is the implementation of Jenkins Configuration as Code.  Add a key under configScripts for each configuration area,
      # where each corresponds to a plugin or section of the UI.  Each key (prior to | character) is just a label, and can be any value.
      # Keys are only used to give the section a meaningful name.  The only restriction is they may only contain RFC 1123 \ DNS label
      # characters: lowercase letters, numbers, and hyphens.  The keys become the name of a configuration yaml file on the controller in
      # /var/jenkins_home/casc_configs (by default) and will be processed by the Configuration as Code Plugin.  The lines after each |
      # become the content of the configuration yaml file.  The first line after this is a JCasC root element, eg jenkins, credentials,
      # etc.  Best reference is https://<jenkins_url>/configuration-as-code/reference.  The example below creates a welcome message:
      JCasC:
        defaultConfig: true
        configUrls: [ ]
        # - https://acme.org/jenkins.yaml
        # Remote URL:s for configuration files.
        configScripts: { }
        #  welcome-message: |
        #    jenkins:
        #      systemMessage: Welcome to our CI\CD server.  This Jenkins is configured and managed 'as code'.
        # Allows adding to the top-level security JCasC section. For legacy,  default the chart includes apiToken configurations
        security:
          apiToken:
            creationOfLegacyTokenEnabled: false
            tokenGenerationOnCreationEnabled: false
            usageStatisticsEnabled: true
        # Ignored if securityRealm is defined in controller.JCasC.configScripts
        securityRealm: |-
          local:
            allowsSignup: false
            enableCaptcha: false
            users:
            - id: "${chart-admin-username}"
              name: "Jenkins Admin"
              password: "${chart-admin-password}"
        # Ignored if authorizationStrategy is defined in controller.JCasC.configScripts
        authorizationStrategy: |-
          loggedInUsersCanDoAnything:
            allowAnonymousRead: false

      ingress:
        enabled: true
        ingressClassName: internal
        annotations:
          hajimari.io/icon: simple-icons:grafana
        hosts:
          - &host "jenkins.${SECRET_DOMAIN}"
        tls:
          - hosts:
              - *host

    agent:
      enabled: true
      image: "jenkins/inbound-agent"
      tag: "3107.v665000b_51092-15"
      workingDir: "/home/jenkins/agent"
      resources:
        requests:
          cpu: "512m"
          memory: "512Mi"
          # ephemeralStorage:
        limits:
          cpu: "512m"
          memory: "512Mi"
          # ephemeralStorage:

    persistence:
      enabled: true
      storageClass: local-path
      accessMode: "ReadWriteOnce"
      size: "10Gi"

    networkPolicy:
      # Enable creation of NetworkPolicy resources.
      enabled: false
      # For Kubernetes v1.4, v1.5 and v1.6, use 'extensions/v1beta1'
      # For Kubernetes v1.7, use 'networking.k8s.io/v1'
      apiVersion: networking.k8s.io/v1
      # You can allow agents to connect from both within the cluster (from within specific/all namespaces) AND/OR from a given external IP range
      internalAgents:
        allowed: true
        podLabels: { }
        namespaceLabels: { }
        # project: myproject
      externalAgents: { }
      #   ipCIDR: 172.17.0.0/16
      #   except:
      #     - 172.17.1.0/24

    ## Install Default RBAC roles and bindings
    rbac:
      create: true
      readSecrets: false

